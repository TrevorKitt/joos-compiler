#ifndef __PARSERLITERAL_H__
#define __PARSERLITERAL_H__

enum ParserLiteral {
    PL_SEMICOLON = ";",
    PL_PACKAGE = "package",
    PL_IMPORT = "import",
    PL_DOT = ".",
    PL_CHARLITERAL = "CHAR",
    PL_STRING = "STRING",
    PL_TRUE = "true",
    PL_FALSE = "false",
    PL_NULLABLE = "null",
    PL_NUMBER = "NUMBER",
    PL_ID = "ID",
    PL_CLASS = "class",
    PL_INTERFACE = "INTERFACE",
    PL_LPARAN = "{",
    PL_RPARAN = "}",
    PL_PUBLIC = "public",
    PL_ABSTRACT = "abstract",
    PL_FINAL = "final",
    PL_STATIC = "static",
    PL_NATIVE = "native",
    PL_PROTECTED = "protected",
    PL_EXTENDS = "extends",
    PL_IMPLEMENTS = "implements",
    PL_COMMA = ",",
    PL_BYTE = "byte",
    PL_SHORT = "short",
    PL_INT = "int",
    PL_LONG = "long",
    PL_CHARTYPE = "char",
    PL_BOOLEAN = "boolean",
    PL_SQRBRACK = "[",
    PL_SQLBRACK = "]",
    PL_EQUAL = "=",
    PL_THIS = "this",
    PL_NEW = "new",
    PL_LAZYOR = "||",
    PL_LAZYAND = "&&",
    PL_EAGEROR = "|",
    PL_EAGERAND = "&",
    PL_COMPEQUAL = "==",
    PL_COMPNOTEQUAL = "!=",
    PL_LT = "<",
    PL_GT = ">",
    PL_LTE = "<=",
    PL_GTE = ">=",
    PL_INSTACEOF = "instanceof",
    PL_PLUS = "+",
    PL_MINUS = "-",
    PL_STAR = "*",
    PL_DIVIDE = "/",
    PL_MOD = "%",
    PL_NOT = "!",
    PL_VOID = "void",
    PL_IF = "if",
    PL_ELSE = "else",
    PL_WHILE = "while",
    PL_FOR = "for",
    PL_RETURN = "return",
    PL_LBRACE = "(",
    PL_RBRACE = ")",

};

#endif
